
//updated

CREATE TABLE IF NOT EXISTS public.storage (
    nameofthebrand VARCHAR,
    quantityinpackets INTEGER,
    costofeachpacket INTEGER,
    location VARCHAR
);


CREATE TABLE IF NOT EXISTS public.customers (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    shop_name VARCHAR(100),
    address VARCHAR(50),
    phone_number VARCHAR(100),
    outstanding_balance NUMERIC(10,2) DEFAULT 0.00
);


CREATE TABLE IF NOT EXISTS public.mills (
    mill_id SERIAL PRIMARY KEY,
    mill_name VARCHAR(100) NOT NULL,
    location VARCHAR(100),
    amount_due NUMERIC(10,2)
);


CREATE TABLE IF NOT EXISTS public.profits (
    profit_id SERIAL PRIMARY KEY,
    date_of_profit DATE,
    profit_amount NUMERIC(10,2),
    expenses_amount NUMERIC(10,2) DEFAULT 0
);


CREATE TABLE IF NOT EXISTS public.transactions (
    transaction_id SERIAL PRIMARY KEY,
    customer_id INTEGER NOT NULL,
    transaction_date DATE DEFAULT CURRENT_DATE,
    amount NUMERIC(10,2) NOT NULL,
    transaction_type VARCHAR(6) CHECK (transaction_type IN ('add', 'remove')),
    customer_name VARCHAR(255),
    address VARCHAR(100),
    sellingbrand VARCHAR(100),
    sellingquantity INTEGER,
    boughtprize NUMERIC(10,2),
    sellingprize NUMERIC(10,2),
    CONSTRAINT fk_customer FOREIGN KEY (customer_id)
        REFERENCES public.customers (customer_id)
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.mill_transactions (
    mill_transaction_id SERIAL PRIMARY KEY,
    mill_id INTEGER NOT NULL,
    transaction_date DATE DEFAULT CURRENT_DATE,
    transaction_type VARCHAR(10) NOT NULL CHECK (transaction_type IN ('pay', 'buy')),
    amount NUMERIC(10,2) NOT NULL,
    rice_brand VARCHAR(100),  -- New column to store the rice brand
    rice_quantity INTEGER,
    rice_price NUMERIC(10,2),
    description VARCHAR(255),
    CONSTRAINT fk_mill FOREIGN KEY (mill_id)
        REFERENCES public.mills (mill_id)
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);


CREATE TABLE users (
  user_id SERIAL PRIMARY KEY,
  username VARCHAR(50) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  role VARCHAR(20) DEFAULT 'staff'  -- can be 'admin' or 'staff'
);


-- SELECT pg_get_serial_sequence('customers', 'customer_id');
-- SELECT MAX(customer_id) FROM customers;
-- SELECT setval('public.customers_customer_id_seq', 111, true);



-- SELECT pg_get_serial_sequence('mill_transactions', 'mill_transaction_id');
-- select max(mill_transaction_id) from mill_transactions
-- SELECT setval('public.mill_transactions_mill_transaction_id_seq', 209, true);



-- SELECT pg_get_serial_sequence('mills', 'mill_id');
-- select max(mill_id) from mill_transactions
-- SELECT setval('public.mills_mill_id_seq', 12, true);



-- SELECT pg_get_serial_sequence('profits', 'profit_id');
-- select max(profit_id) from profits
SELECT setval('public.profits_profit_id_seq', 118, true);



-- SELECT pg_get_serial_sequence('profits', 'profit_id');
-- select max(profit_id) from profits
-- SELECT setval('public.profits_profit_id_seq', 118, true);



-- SELECT pg_get_serial_sequence('transactions', 'transaction_id');
-- select max(transaction_id) from transactions
-- SELECT setval('public.transactions_transaction_id_seq', 2995, true);


