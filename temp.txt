create table Storage(
	NameOfTheBrand varchar,
	quantityInPackets integer,
	costOfEachPacket integer,
	location varchar
)

create table customers(
	customer_id serial primary key,
	name varchar(100) NOT NULL,
	shop_name VARCHAR(100),
	address VARCHAR(50),
	phone_number VARCHAR(100),
	outstanding_balance NUMERIC(10,2) DEFAULT 0.00
);

CREATE TABLE IF NOT EXISTS public.transactions
(
    transaction_id SERIAL PRIMARY KEY,  -- Using SERIAL for auto-increment
    customer_id INTEGER NOT NULL,       -- Ensuring customer_id is not NULL
    transaction_date DATE DEFAULT CURRENT_DATE,  -- Default date as current date
    amount NUMERIC(10, 2) NOT NULL,      -- Amount with 2 decimal precision
    transaction_type VARCHAR(6) CHECK (transaction_type IN ('add', 'remove')),  -- Limit transaction_type to 'add' or 'remove'
    customer_name VARCHAR(255),          -- Name of the customer
    address VARCHAR(100),                -- Address of the customer
    CONSTRAINT fk_customer FOREIGN KEY (customer_id)
        REFERENCES public.customers (customer_id) ON DELETE CASCADE ON UPDATE NO ACTION
);



CREATE TRIGGER transaction_after_update
AFTER UPDATE ON public.customers
FOR EACH ROW
EXECUTE FUNCTION public.update_transaction();



CREATE OR REPLACE FUNCTION public.update_transaction()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    -- Insert a record into transactions table based on balance change
    INSERT INTO transactions (customer_id, amount, transaction_type, customer_name, address)
    VALUES (
        NEW.customer_id,
        NEW.outstanding_balance - OLD.outstanding_balance,  -- Difference in outstanding balance
        CASE
            WHEN NEW.outstanding_balance > OLD.outstanding_balance THEN 'add'  -- If balance increased
            ELSE 'remove'  -- If balance decreased
        END,
        (SELECT name FROM customers WHERE customer_id = NEW.customer_id),
        (SELECT address FROM customers WHERE customer_id = NEW.customer_id)
    );
    RETURN NEW;  -- Return the new row after the update
END;
$function$

create table mills(
mill_id serial primary key,
mill_name varchar(100) not null,
location varchar(100),
amount_due numeric(10,2)
);


create profits(
	profit_id serial primary key,
	date_of_profit date,
	profit_amount numeric(10,2),
	expenses_amount numeric(10,2)
);


ALTER TABLE profits 
ALTER COLUMN expenses_amount SET DEFAULT 0;


drop trigger transaction_after_update on customers
outsider customer id


//need to update transactions table




//updated

CREATE TABLE IF NOT EXISTS public.storage (
    nameofthebrand VARCHAR,
    quantityinpackets INTEGER,
    costofeachpacket INTEGER,
    location VARCHAR
);


CREATE TABLE IF NOT EXISTS public.customers (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    shop_name VARCHAR(100),
    address VARCHAR(50),
    phone_number VARCHAR(100),
    outstanding_balance NUMERIC(10,2) DEFAULT 0.00
);


CREATE TABLE IF NOT EXISTS public.mills (
    mill_id SERIAL PRIMARY KEY,
    mill_name VARCHAR(100) NOT NULL,
    location VARCHAR(100),
    amount_due NUMERIC(10,2)
);


CREATE TABLE IF NOT EXISTS public.profits (
    profit_id SERIAL PRIMARY KEY,
    date_of_profit DATE,
    profit_amount NUMERIC(10,2),
    expenses_amount NUMERIC(10,2) DEFAULT 0
);


CREATE TABLE IF NOT EXISTS public.transactions (
    transaction_id SERIAL PRIMARY KEY,
    customer_id INTEGER NOT NULL,
    transaction_date DATE DEFAULT CURRENT_DATE,
    amount NUMERIC(10,2) NOT NULL,
    transaction_type VARCHAR(6) CHECK (transaction_type IN ('add', 'remove')),
    customer_name VARCHAR(255),
    address VARCHAR(100),
    sellingbrand VARCHAR(100),
    sellingquantity INTEGER,
    boughtprize NUMERIC(10,2),
    sellingprize NUMERIC(10,2),
    CONSTRAINT fk_customer FOREIGN KEY (customer_id)
        REFERENCES public.customers (customer_id)
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.mill_transactions (
    mill_transaction_id SERIAL PRIMARY KEY,
    mill_id INTEGER NOT NULL,
    transaction_date DATE DEFAULT CURRENT_DATE,
    transaction_type VARCHAR(10) NOT NULL CHECK (transaction_type IN ('pay', 'buy')),
    amount NUMERIC(10,2) NOT NULL,
    rice_brand VARCHAR(100),  -- New column to store the rice brand
    rice_quantity INTEGER,
    rice_price NUMERIC(10,2),
    description VARCHAR(255),
    CONSTRAINT fk_mill FOREIGN KEY (mill_id)
        REFERENCES public.mills (mill_id)
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);


